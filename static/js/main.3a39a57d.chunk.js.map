{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handelClick","bind","evt","target","value","this","props","clicked","id","split","className","onClick","Component","Board","val","i","valuesarr","j","push","state","values","turn","gameOver","cellClick","isWinner","resetBtn","setState","cellno","x","y","vals","t","gameStatus","feild","count","cells","key","winner","draw","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VAwBeA,G,wBArBX,aAAc,IAAD,8BACT,+CACKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFV,E,yEAIDC,GACgB,KAArBA,EAAIC,OAAOC,OAEdC,KAAKC,MAAMC,QAAQL,EAAIC,OAAOK,GAAGC,MAAM,Q,+BAGvC,OACI,4BACAC,UAAU,OACVC,QAASN,KAAKL,YACdQ,GAAIH,KAAKC,MAAME,GACfJ,MAAOC,KAAKC,MAAMF,OACG,KAAnBC,KAAKC,MAAMF,MAAW,IAAIC,KAAKC,MAAMF,W,GAjB/BQ,cCsILC,E,YApIX,aAAc,IAAD,sBACT,8CAEA,IADA,IAAIC,EAAM,GACFC,EAAE,EAAEA,EAAE,EAAEA,IAChB,CAEI,IADA,IAAIC,EAAY,GACRC,EAAE,EAAEA,EAAE,EAAEA,IAEZD,EAAUC,GAAK,GAEnBH,EAAII,KAAKF,GAVJ,OAeT,EAAKG,MAAQ,CACTC,OAAON,EACPO,KAAK,EACLC,UAAU,GAKd,EAAKC,UAAY,EAAKA,UAAUtB,KAAf,gBACjB,EAAKuB,SAAW,EAAKA,SAASvB,KAAd,gBAChB,EAAKwB,SAAW,EAAKA,SAASxB,KAAd,gBAzBP,E,wEA6BT,IADA,IAAIa,EAAM,GACFC,EAAE,EAAEA,EAAE,EAAEA,IAChB,CAEI,IADA,IAAIC,EAAY,GACRC,EAAE,EAAEA,EAAE,EAAEA,IAEZD,EAAUC,GAAK,GAEnBH,EAAII,KAAKF,GAEbX,KAAKqB,SAAS,CACVN,OAAON,EACPO,KAAK,EACLC,UAAU,M,yEAGFK,G,mFACgB,IAAzBtB,KAAKc,MAAMG,S,wDAEVM,EAAID,EAAO,GACXE,EAAIF,EAAO,IACXG,EAAOzB,KAAKc,MAAMC,QACjBQ,GAAGC,GAAyB,IAApBxB,KAAKc,MAAME,KAAa,IAAM,IACvCU,EAAsB,IAAlB1B,KAAKc,MAAME,KAAS,EAAE,E,SACxBhB,KAAKqB,SAAS,CAChBN,OAAOU,EACPT,KAAKU,I,cAGLC,EAAa3B,KAAKmB,SAASnB,KAAKc,MAAMC,Q,UAEpCf,KAAKqB,SAAS,CAChBJ,SAASU,I,uIAGRC,GAGL,IAAK,IAAIlB,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIkB,EAAMlB,GAAG,KAAOkB,EAAMlB,GAAG,IAAMkB,EAAMlB,GAAG,KAAOkB,EAAMlB,GAAG,IAAsB,KAAhBkB,EAAMlB,GAAG,IAA6B,KAAhBkB,EAAMlB,GAAG,IAA6B,KAAhBkB,EAAMlB,GAAG,GACnH,OAAO,EAGf,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIkB,EAAM,GAAGlB,KAAOkB,EAAM,GAAGlB,IAAMkB,EAAM,GAAGlB,KAAOkB,EAAM,GAAGlB,IAAuB,KAAhBkB,EAAM,GAAGlB,IAA6B,KAAhBkB,EAAM,GAAGlB,IAA6B,KAAhBkB,EAAM,GAAGlB,GACpH,OAAO,EAGf,GAAIkB,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAsB,KAAhBA,EAAM,GAAG,IAA6B,KAAhBA,EAAM,GAAG,IAA6B,KAAhBA,EAAM,GAAG,GACnH,OAAO,EAEX,GAAIA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAuB,KAAhBA,EAAM,GAAG,IAA8B,KAAhBA,EAAM,GAAG,IAA8B,KAAhBA,EAAM,GAAG,GACtH,OAAO,EAIX,IADA,IAAIC,EAAQ,EACJnB,EAAE,EAAEA,EAAE,EAAEA,IAEZ,IAAI,IAAIE,EAAE,EAAEA,EAAE,EAAEA,IAEO,KAAhBgB,EAAMlB,GAAGE,IACZiB,IAIR,OAAa,IAAVA,EACI,GAEC,I,+BAOR,IADA,IAAIC,EAAQ,GACJpB,EAAE,EAAEA,EAAE,EAAEA,IAEZ,IAAI,IAAIE,EAAE,EAAEA,EAAE,EAAEA,IAChBkB,EAAMjB,KAAK,kBAAC,EAAD,CAAMd,MAAOC,KAAKc,MAAMC,OAAOL,GAAGE,GAAImB,IAAG,UAAKrB,EAAL,YAAUE,GAAKT,GAAE,UAAKO,EAAL,YAAUE,GAAKV,QAASF,KAAKkB,aAGtG,IAAIc,EAAS,6BACG,wBAAI3B,UAAU,UAA8B,IAApBL,KAAKc,MAAME,KAAW,KAAK,IAAnD,cAAkE,4BAAQV,QAASN,KAAKoB,SAAUf,UAAU,0BAA1C,WAE9E4B,EAAO,6BACK,wBAAI5B,UAAU,UAAd,iBAAqC,4BAAQC,QAASN,KAAKoB,SAAUf,UAAU,0BAA1C,WAGjDW,EAAO,wBAAIX,UAAU,QAA4B,IAApBL,KAAKc,MAAME,KAAW,YAAY,aAEnE,OACI,gCAAQ,6BACqB,IAAxBhB,KAAKc,MAAMG,UAA0C,IAAxBjB,KAAKc,MAAMG,SAAyC,IAAxBjB,KAAKc,MAAMG,SAAgBe,EAAOC,EAAOjB,EAEnG,yBAAKX,UAAU,kBACX,yBAAKA,UAAU,SACVyB,U,GA7HLvB,a,MCQL2B,MARf,WACE,OACE,yBAAK7B,UAAU,OACX,kBAAC,EAAD,Q,YCMY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a39a57d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Cell.css';\r\nclass  Cell extends Component{\r\n    constructor(){\r\n        super();\r\n        this.handelClick = this.handelClick.bind(this);\r\n    }\r\n    handelClick(evt){\r\n        if(evt.target.value !== \"\")\r\n        return;\r\n        this.props.clicked(evt.target.id.split(\"-\"));\r\n    }\r\n    render(){\r\n        return(\r\n            <button \r\n            className=\"cell\" \r\n            onClick={this.handelClick} \r\n            id={this.props.id}\r\n            value={this.props.value}\r\n            >{this.props.value===\"\"?\".\":this.props.value}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\nimport \"./Board.css\";\r\nimport Cell from './Cell';\r\nclass Board extends Component{\r\n    constructor(){\r\n        super();\r\n        let val = [];\r\n        for(let i=0;i<3;i++)\r\n        {\r\n            let valuesarr = [];\r\n            for(let j=0;j<3;j++)\r\n            {\r\n                valuesarr[j] = \"\";\r\n            }\r\n            val.push(valuesarr);\r\n        }\r\n\r\n        //0 means x ki baari hai\r\n        //1 means o ki baari hai\r\n        this.state = {\r\n            values:val,\r\n            turn:0,\r\n            gameOver:-1\r\n        }\r\n        //-1 still playing game\r\n        //0 win\r\n        //1 draw\r\n        this.cellClick = this.cellClick.bind(this);\r\n        this.isWinner = this.isWinner.bind(this);\r\n        this.resetBtn = this.resetBtn.bind(this);\r\n    }\r\n    resetBtn(){\r\n        let val = [];\r\n        for(let i=0;i<3;i++)\r\n        {\r\n            let valuesarr = [];\r\n            for(let j=0;j<3;j++)\r\n            {\r\n                valuesarr[j] = \"\";\r\n            }\r\n            val.push(valuesarr);\r\n        }\r\n        this.setState({\r\n            values:val,\r\n            turn:0,\r\n            gameOver:-1\r\n        })\r\n    }\r\n    async cellClick(cellno){\r\n        if(this.state.gameOver !== -1)\r\n        return ;\r\n        let x = cellno[0];\r\n        let y = cellno[1];\r\n        let vals = this.state.values;\r\n        vals[x][y] = this.state.turn === 0 ? 'X' : 'O';\r\n        let t = this.state.turn===0?1:0;\r\n        await this.setState({\r\n            values:vals,\r\n            turn:t,\r\n        })\r\n\r\n        let gameStatus = this.isWinner(this.state.values);\r\n\r\n        await this.setState({\r\n            gameOver:gameStatus\r\n        })\r\n    }\r\n    isWinner(feild){\r\n        // check row wise\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (feild[i][0] === feild[i][1] && feild[i][1] === feild[i][2] && feild[i][0] !== \"\" && feild[i][1] !== \"\" && feild[i][2] !== \"\") {\r\n                return 0;\r\n            }\r\n        }\r\n        for (let i = 0; i < 3; i++) {\r\n            if (feild[0][i] === feild[1][i] && feild[1][i] === feild[2][i] &&  feild[0][i] !== \"\" && feild[1][i] !== \"\" && feild[2][i] !== \"\") {\r\n                return 0;\r\n            }\r\n        }\r\n        if (feild[0][0] === feild[1][1] && feild[1][1] === feild[2][2] && feild[0][0] !== \"\" && feild[1][1] !== \"\" && feild[2][2] !== \"\") {\r\n            return 0;\r\n        }\r\n        if (feild[0][2] === feild[1][1] && feild[1][1] === feild[2][0]  && feild[0][2] !== \"\"  && feild[1][1] !== \"\"  && feild[2][0] !== \"\") {\r\n            return 0;\r\n        }\r\n\r\n        let count = 0;\r\n        for(let i=0;i<3;i++)\r\n        {\r\n            for(let j=0;j<3;j++)\r\n            {\r\n                if(feild[i][j] !== \"\")\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if(count === 9)\r\n        return 1;\r\n\r\n        return -1;\r\n        //-1 still playing game\r\n        //0 win\r\n        //1 draw\r\n    }\r\n    render(){\r\n        let cells = [];\r\n        for(let i=0;i<3;i++)\r\n        {\r\n            for(let j=0;j<3;j++)\r\n            cells.push(<Cell value={this.state.values[i][j]} key={`${i}-${j}`} id={`${i}-${j}`} clicked={this.cellClick}/>);\r\n        }\r\n\r\n        let winner = <div>\r\n                        <h1 className=\"winner\">{this.state.turn === 0?'O ':\"X\"} is Winner <button onClick={this.resetBtn} className=\"btn btn-lg btn-success\">Reset</button></h1>\r\n                    </div>\r\n        let draw = <div>\r\n                        <h1 className=\"winner\">Match is Draw <button onClick={this.resetBtn} className=\"btn btn-lg btn-success\">Reset</button></h1>\r\n                    </div>\r\n\r\n        let turn = <h1 className=\"turn\">{this.state.turn === 0?\"Turn of X\":\"Turn of O\"}</h1>\r\n\r\n        return (\r\n            <center><div>\r\n                {this.state.gameOver === 0 || this.state.gameOver === 1 ? this.state.gameOver === 0? winner:draw : turn}\r\n                \r\n                <div className=\"boardContainer\">\r\n                    <div className=\"board\">\r\n                        {cells}\r\n                    </div>\r\n                </div>\r\n            </div></center>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}